#!/bin/bash

# Script to start, restart, and stop anax inside a docker container

# Note: this won't run while we are blocking on a foreground cmd. Have to run anax in background and use wait.
trap 'echo "Unregistering..."; /usr/bin/hzn unregister -f; echo "Done. Exiting..."; exit 0' SIGTERM

ANAX_LOG_LEVEL=${ANAX_LOG_LEVEL:-3}

usage() {
	echo "Usage: $0 {start|restart|status|block} [env-script-to-run] [gw-token]"
	exit 1
}

cmd="$1"
envScript="$2"
token="$3"

# Check the exit status of the previously run command and exit if nonzero
checkrc() {
  if [[ $1 -ne 0 ]]; then
  	if [[ -n "$2" ]]; then
  		fromStr="from: $2"
  	else
  		fromStr="from the last command"
  	fi
    echo "Error: exit code $1 $fromStr"
    exit $1
  fi
}

createCertificate() {
	token="$1"
	echo "Creating the WIoTP certificate with token '$token'..."
	wiotp_create_certificate -p "$token"
}

defaultEnv() {
	token="$1"

	# Source /etc/default/horizon
	envFile=/etc/default/horizon
	if [[ -f "$envFile" ]]; then
		echo "Sourcing $envFile..."
		source $envFile
		export $(cut -d= -f1 $envFile)
	fi

	# Now the the host dirs /etc/wiotp-edge and /var/wiotp-edge have been mounted over ours, copy our backup back into them
	# I don't think we have to check if we have already done this, because i think it is only run on the 1st start of the container
	cp -a /tmp/etc/wiotp-edge/* /etc/wiotp-edge
	cp -a /tmp/var/wiotp-edge/* /var/wiotp-edge

	if [[ -n "$token" ]]; then
		createCertificate "$token"   # create the wiotp certificate
	fi

	# Update several fields in anax.json
	anaxJsonFile='/etc/horizon/anax.json'
	echo "Modifying $anaxJsonFile for anax-in-container..."

	# Read the json object in /etc/horizon/anax.json
	anaxJson=$(jq . $anaxJsonFile)
	checkrc $? "read anax.json"
	cp $anaxJsonFile $anaxJsonFile.orig
	checkrc $? "back up anax.json"

	# Anax must be listening on port 80 of all interfaces for it to be published to the host by docker (we will only publish it to 127.0.0.1 on the host)
	anaxJson=$(jq ".Edge.APIListen = \"0.0.0.0:80\" " <<< $anaxJson)
	checkrc $? "change APIListen"

	# Since they are running anax in a container, assume they could run multiple anax containers
	anaxJson=$(jq ".Edge.MultipleAnaxInstances = true" <<< $anaxJson)
	checkrc $? "change MultipleAnaxInstances"

	# Experimental: configure anax running on mac host
	# The Mac can not mount the /var/run/docker.sock unix socket into the container. So on the host you must use a cmd like this to have the docker engine listen on a port:
	#    socat TCP-LISTEN:2375,reuseaddr,fork UNIX-CONNECT:/var/run/docker.sock &
	# Then on docker run use -e MAC_HOST=192.168.1.10 so the anax container can connect to that.
	if [[ -n "$MAC_HOST" ]]; then
	  anaxJson=$(jq ".Edge.DockerEndpoint = \"tcp://$MAC_HOST:2375\" " <<< $anaxJson)
	  checkrc $? "change DockerEndpoint"

	  # Also can't mount /var, but can mount anything under /private
	  anaxJson=$(jq ".Edge.ServiceStorage = \"/private/var/tmp/horizon/service_storage/\" " <<< $anaxJson)
	  checkrc $? "change ServiceStorage"
	fi

	# Write the new json back to the file
	echo "$anaxJson" > $anaxJsonFile
	checkrc $? "write anax.json"
}

block() {
	echo "Sleeping forever..."
	while :; do sleep 2073600; done    # block forever w/o starting anax so the container stays up, and you can exec in, start anax manually, and debug
}

start() {
	envScript="$1"
	token="$2"

	if [[ -n "$envScript" ]]; then
		# Handle special case environments
		if [[ "$envScript" == "block" ]]; then
			block   # a special case to just sleep forever so we can get into the container and examine it
		elif [[ "$envScript" == "only_certificate" ]]; then
			if [[ -z "$token" ]]; then
				echo "Error: a token must be specified $envScript."
				exit 2
			fi
			createCertificate "$token"   # create the wiotp certificate
			exit 0
		fi
	fi

	# Do the config that is specific to running anax in a container, but needed for all environments
	defaultEnv "$token"    # the optional gw token to create the wiotp certificate with

	# This argument is an optional script to run to configure anax for a specific development environment before starting it
	if [[ -n "$envScript" ]]; then
		# Run the environment config script, then fall thru to start anax
		if [[ ! -x "$envScript" ]]; then
			echo "Error: the environment script to run ($envScript) does not exist, or is not executable."
			exit 2
		fi
		$envScript
		checkrc $? "running $envScript"
	fi

	# Now repeatedly run anax...
	while true; do
		anaxCmd="/usr/horizon/bin/anax -v $ANAX_LOG_LEVEL -logtostderr -config /etc/horizon/anax.json"
		echo "$anaxCmd"
		# We run this in the background and wait on it using wait, because that's the only way for traps to get control immediately
		$anaxCmd &
		pid=$!
		wait $pid
		if [[ $? -gt 128 ]]; then
			# This means a signal interrupted wait. If it was sigterm, then our trap will run immediately, clean up, and exit.
			# Else, we should go back to waiting on anax
			wait $pid
		fi
		echo "Anax ended with exit code $?.  Respawning..." >&2
		sleep 1		# in case the cmd above is failing, this loop won't consume 100% cpu
	done
}

# Note: the way to stop anax w/o it restarting is to stop the container
#stopanax() {
#	killall /usr/horizon/bin/anax
#}

restart() {
	killall anax 		# the start function will automatically restart it
	#stopanax
	#start
}

psg() {
	ps aux|head -1
	ps aux|grep -i $*|grep -v 'grep -'
}

status() {
	psg /usr/horizon/bin/anax
}

# Main....
case "$cmd" in
	start)
		start "$envScript" "$token"
		;;
	# stop)
		# stopanax
		# ;;
	restart)
		restart
		;;
	status)
		status
		;;
	*)
		usage
esac
